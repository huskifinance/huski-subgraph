// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddShare extends ethereum.Event {
  get params(): AddShare__Params {
    return new AddShare__Params(this);
  }
}

export class AddShare__Params {
  _event: AddShare;

  constructor(event: AddShare) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get share(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Liquidate extends ethereum.Event {
  get params(): Liquidate__Params {
    return new Liquidate__Params(this);
  }
}

export class Liquidate__Params {
  _event: Liquidate;

  constructor(event: Liquidate) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get wad(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Reinvest extends ethereum.Event {
  get params(): Reinvest__Params {
    return new Reinvest__Params(this);
  }
}

export class Reinvest__Params {
  _event: Reinvest;

  constructor(event: Reinvest) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get reward(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get bounty(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RemoveShare extends ethereum.Event {
  get params(): RemoveShare__Params {
    return new RemoveShare__Params(this);
  }
}

export class RemoveShare__Params {
  _event: RemoveShare;

  constructor(event: RemoveShare) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get share(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PancakeswapV2Worker extends ethereum.SmartContract {
  static bind(address: Address): PancakeswapV2Worker {
    return new PancakeswapV2Worker("PancakeswapV2Worker", address);
  }

  addStrat(): Address {
    let result = super.call("addStrat", "addStrat():(address)", []);

    return result[0].toAddress();
  }

  try_addStrat(): ethereum.CallResult<Address> {
    let result = super.tryCall("addStrat", "addStrat():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceToShare(balance: BigInt): BigInt {
    let result = super.call(
      "balanceToShare",
      "balanceToShare(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(balance)]
    );

    return result[0].toBigInt();
  }

  try_balanceToShare(balance: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceToShare",
      "balanceToShare(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(balance)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseToken(): Address {
    let result = super.call("baseToken", "baseToken():(address)", []);

    return result[0].toAddress();
  }

  try_baseToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("baseToken", "baseToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  cake(): Address {
    let result = super.call("cake", "cake():(address)", []);

    return result[0].toAddress();
  }

  try_cake(): ethereum.CallResult<Address> {
    let result = super.tryCall("cake", "cake():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  farmingToken(): Address {
    let result = super.call("farmingToken", "farmingToken():(address)", []);

    return result[0].toAddress();
  }

  try_farmingToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("farmingToken", "farmingToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fee(): BigInt {
    let result = super.call("fee", "fee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_fee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("fee", "fee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeDenom(): BigInt {
    let result = super.call("feeDenom", "feeDenom():(uint256)", []);

    return result[0].toBigInt();
  }

  try_feeDenom(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("feeDenom", "feeDenom():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMktSellAmount(aIn: BigInt, rIn: BigInt, rOut: BigInt): BigInt {
    let result = super.call(
      "getMktSellAmount",
      "getMktSellAmount(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(aIn),
        ethereum.Value.fromUnsignedBigInt(rIn),
        ethereum.Value.fromUnsignedBigInt(rOut)
      ]
    );

    return result[0].toBigInt();
  }

  try_getMktSellAmount(
    aIn: BigInt,
    rIn: BigInt,
    rOut: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMktSellAmount",
      "getMktSellAmount(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(aIn),
        ethereum.Value.fromUnsignedBigInt(rIn),
        ethereum.Value.fromUnsignedBigInt(rOut)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  health(id: BigInt): BigInt {
    let result = super.call("health", "health(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBigInt();
  }

  try_health(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("health", "health(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liqStrat(): Address {
    let result = super.call("liqStrat", "liqStrat():(address)", []);

    return result[0].toAddress();
  }

  try_liqStrat(): ethereum.CallResult<Address> {
    let result = super.tryCall("liqStrat", "liqStrat():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lpToken(): Address {
    let result = super.call("lpToken", "lpToken():(address)", []);

    return result[0].toAddress();
  }

  try_lpToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("lpToken", "lpToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  masterChef(): Address {
    let result = super.call("masterChef", "masterChef():(address)", []);

    return result[0].toAddress();
  }

  try_masterChef(): ethereum.CallResult<Address> {
    let result = super.tryCall("masterChef", "masterChef():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  maxReinvestBountyBps(): BigInt {
    let result = super.call(
      "maxReinvestBountyBps",
      "maxReinvestBountyBps():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxReinvestBountyBps(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxReinvestBountyBps",
      "maxReinvestBountyBps():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  okReinvestors(param0: Address): boolean {
    let result = super.call("okReinvestors", "okReinvestors(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_okReinvestors(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "okReinvestors",
      "okReinvestors(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  okStrats(param0: Address): boolean {
    let result = super.call("okStrats", "okStrats(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_okStrats(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("okStrats", "okStrats(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  operator(): Address {
    let result = super.call("operator", "operator():(address)", []);

    return result[0].toAddress();
  }

  try_operator(): ethereum.CallResult<Address> {
    let result = super.tryCall("operator", "operator():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pid(): BigInt {
    let result = super.call("pid", "pid():(uint256)", []);

    return result[0].toBigInt();
  }

  try_pid(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("pid", "pid():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reinvestBountyBps(): BigInt {
    let result = super.call(
      "reinvestBountyBps",
      "reinvestBountyBps():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_reinvestBountyBps(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "reinvestBountyBps",
      "reinvestBountyBps():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  router(): Address {
    let result = super.call("router", "router():(address)", []);

    return result[0].toAddress();
  }

  try_router(): ethereum.CallResult<Address> {
    let result = super.tryCall("router", "router():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  shareToBalance(share: BigInt): BigInt {
    let result = super.call(
      "shareToBalance",
      "shareToBalance(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(share)]
    );

    return result[0].toBigInt();
  }

  try_shareToBalance(share: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "shareToBalance",
      "shareToBalance(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(share)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  shares(param0: BigInt): BigInt {
    let result = super.call("shares", "shares(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_shares(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("shares", "shares(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalShare(): BigInt {
    let result = super.call("totalShare", "totalShare():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalShare(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalShare", "totalShare():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  wNative(): Address {
    let result = super.call("wNative", "wNative():(address)", []);

    return result[0].toAddress();
  }

  try_wNative(): ethereum.CallResult<Address> {
    let result = super.tryCall("wNative", "wNative():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _baseToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _masterChef(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _router(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _pid(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _addStrat(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _liqStrat(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _reinvestBountyBps(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class LiquidateCall extends ethereum.Call {
  get inputs(): LiquidateCall__Inputs {
    return new LiquidateCall__Inputs(this);
  }

  get outputs(): LiquidateCall__Outputs {
    return new LiquidateCall__Outputs(this);
  }
}

export class LiquidateCall__Inputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LiquidateCall__Outputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }
}

export class ReinvestCall extends ethereum.Call {
  get inputs(): ReinvestCall__Inputs {
    return new ReinvestCall__Inputs(this);
  }

  get outputs(): ReinvestCall__Outputs {
    return new ReinvestCall__Outputs(this);
  }
}

export class ReinvestCall__Inputs {
  _call: ReinvestCall;

  constructor(call: ReinvestCall) {
    this._call = call;
  }
}

export class ReinvestCall__Outputs {
  _call: ReinvestCall;

  constructor(call: ReinvestCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetCriticalStrategiesCall extends ethereum.Call {
  get inputs(): SetCriticalStrategiesCall__Inputs {
    return new SetCriticalStrategiesCall__Inputs(this);
  }

  get outputs(): SetCriticalStrategiesCall__Outputs {
    return new SetCriticalStrategiesCall__Outputs(this);
  }
}

export class SetCriticalStrategiesCall__Inputs {
  _call: SetCriticalStrategiesCall;

  constructor(call: SetCriticalStrategiesCall) {
    this._call = call;
  }

  get _addStrat(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _liqStrat(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetCriticalStrategiesCall__Outputs {
  _call: SetCriticalStrategiesCall;

  constructor(call: SetCriticalStrategiesCall) {
    this._call = call;
  }
}

export class SetMaxReinvestBountyBpsCall extends ethereum.Call {
  get inputs(): SetMaxReinvestBountyBpsCall__Inputs {
    return new SetMaxReinvestBountyBpsCall__Inputs(this);
  }

  get outputs(): SetMaxReinvestBountyBpsCall__Outputs {
    return new SetMaxReinvestBountyBpsCall__Outputs(this);
  }
}

export class SetMaxReinvestBountyBpsCall__Inputs {
  _call: SetMaxReinvestBountyBpsCall;

  constructor(call: SetMaxReinvestBountyBpsCall) {
    this._call = call;
  }

  get _maxReinvestBountyBps(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxReinvestBountyBpsCall__Outputs {
  _call: SetMaxReinvestBountyBpsCall;

  constructor(call: SetMaxReinvestBountyBpsCall) {
    this._call = call;
  }
}

export class SetReinvestBountyBpsCall extends ethereum.Call {
  get inputs(): SetReinvestBountyBpsCall__Inputs {
    return new SetReinvestBountyBpsCall__Inputs(this);
  }

  get outputs(): SetReinvestBountyBpsCall__Outputs {
    return new SetReinvestBountyBpsCall__Outputs(this);
  }
}

export class SetReinvestBountyBpsCall__Inputs {
  _call: SetReinvestBountyBpsCall;

  constructor(call: SetReinvestBountyBpsCall) {
    this._call = call;
  }

  get _reinvestBountyBps(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetReinvestBountyBpsCall__Outputs {
  _call: SetReinvestBountyBpsCall;

  constructor(call: SetReinvestBountyBpsCall) {
    this._call = call;
  }
}

export class SetReinvestorOkCall extends ethereum.Call {
  get inputs(): SetReinvestorOkCall__Inputs {
    return new SetReinvestorOkCall__Inputs(this);
  }

  get outputs(): SetReinvestorOkCall__Outputs {
    return new SetReinvestorOkCall__Outputs(this);
  }
}

export class SetReinvestorOkCall__Inputs {
  _call: SetReinvestorOkCall;

  constructor(call: SetReinvestorOkCall) {
    this._call = call;
  }

  get reinvestors(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get isOk(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetReinvestorOkCall__Outputs {
  _call: SetReinvestorOkCall;

  constructor(call: SetReinvestorOkCall) {
    this._call = call;
  }
}

export class SetStrategyOkCall extends ethereum.Call {
  get inputs(): SetStrategyOkCall__Inputs {
    return new SetStrategyOkCall__Inputs(this);
  }

  get outputs(): SetStrategyOkCall__Outputs {
    return new SetStrategyOkCall__Outputs(this);
  }
}

export class SetStrategyOkCall__Inputs {
  _call: SetStrategyOkCall;

  constructor(call: SetStrategyOkCall) {
    this._call = call;
  }

  get strats(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get isOk(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetStrategyOkCall__Outputs {
  _call: SetStrategyOkCall;

  constructor(call: SetStrategyOkCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WorkCall extends ethereum.Call {
  get inputs(): WorkCall__Inputs {
    return new WorkCall__Inputs(this);
  }

  get outputs(): WorkCall__Outputs {
    return new WorkCall__Outputs(this);
  }
}

export class WorkCall__Inputs {
  _call: WorkCall;

  constructor(call: WorkCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get debt(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class WorkCall__Outputs {
  _call: WorkCall;

  constructor(call: WorkCall) {
    this._call = call;
  }
}
