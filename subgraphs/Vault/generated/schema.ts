// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class VaultDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("baseTokenAddress", Value.fromString(""));
    this.set("dailyRatePerSec", Value.fromBigInt(BigInt.zero()));
    this.set("dailyBaseTokenTVL", Value.fromBigInt(BigInt.zero()));
    this.set("dailyLpToken", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VaultDayData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save VaultDayData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("VaultDayData", id.toString(), this);
    }
  }

  static load(id: string): VaultDayData | null {
    return changetype<VaultDayData | null>(store.get("VaultDayData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get baseTokenAddress(): string {
    let value = this.get("baseTokenAddress");
    return value!.toString();
  }

  set baseTokenAddress(value: string) {
    this.set("baseTokenAddress", Value.fromString(value));
  }

  get date(): BigInt | null {
    let value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set date(value: BigInt | null) {
    if (!value) {
      this.unset("date");
    } else {
      this.set("date", Value.fromBigInt(<BigInt>value));
    }
  }

  get dailyLoan(): BigInt | null {
    let value = this.get("dailyLoan");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dailyLoan(value: BigInt | null) {
    if (!value) {
      this.unset("dailyLoan");
    } else {
      this.set("dailyLoan", Value.fromBigInt(<BigInt>value));
    }
  }

  get dailyRatePerSec(): BigInt {
    let value = this.get("dailyRatePerSec");
    return value!.toBigInt();
  }

  set dailyRatePerSec(value: BigInt) {
    this.set("dailyRatePerSec", Value.fromBigInt(value));
  }

  get dailyBaseTokenTVL(): BigInt {
    let value = this.get("dailyBaseTokenTVL");
    return value!.toBigInt();
  }

  set dailyBaseTokenTVL(value: BigInt) {
    this.set("dailyBaseTokenTVL", Value.fromBigInt(value));
  }

  get dailyLpToken(): BigInt {
    let value = this.get("dailyLpToken");
    return value!.toBigInt();
  }

  set dailyLpToken(value: BigInt) {
    this.set("dailyLpToken", Value.fromBigInt(value));
  }
}

export class VaultData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("transactionHash", Value.fromString(""));
    this.set("time", Value.fromBigInt(BigInt.zero()));
    this.set("loan", Value.fromBigInt(BigInt.zero()));
    this.set("lpToken", Value.fromBigInt(BigInt.zero()));
    this.set("ratePerSec", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VaultData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save VaultData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("VaultData", id.toString(), this);
    }
  }

  static load(id: string): VaultData | null {
    return changetype<VaultData | null>(store.get("VaultData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get block(): BigInt | null {
    let value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set block(value: BigInt | null) {
    if (!value) {
      this.unset("block");
    } else {
      this.set("block", Value.fromBigInt(<BigInt>value));
    }
  }

  get lpTokenUSD(): BigInt | null {
    let value = this.get("lpTokenUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lpTokenUSD(value: BigInt | null) {
    if (!value) {
      this.unset("lpTokenUSD");
    } else {
      this.set("lpTokenUSD", Value.fromBigInt(<BigInt>value));
    }
  }

  get baseTokenAddress(): string | null {
    let value = this.get("baseTokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set baseTokenAddress(value: string | null) {
    if (!value) {
      this.unset("baseTokenAddress");
    } else {
      this.set("baseTokenAddress", Value.fromString(<string>value));
    }
  }

  get address(): string | null {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set address(value: string | null) {
    if (!value) {
      this.unset("address");
    } else {
      this.set("address", Value.fromString(<string>value));
    }
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value!.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get time(): BigInt {
    let value = this.get("time");
    return value!.toBigInt();
  }

  set time(value: BigInt) {
    this.set("time", Value.fromBigInt(value));
  }

  get share(): BigInt | null {
    let value = this.get("share");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set share(value: BigInt | null) {
    if (!value) {
      this.unset("share");
    } else {
      this.set("share", Value.fromBigInt(<BigInt>value));
    }
  }

  get loan(): BigInt {
    let value = this.get("loan");
    return value!.toBigInt();
  }

  set loan(value: BigInt) {
    this.set("loan", Value.fromBigInt(value));
  }

  get lpToken(): BigInt {
    let value = this.get("lpToken");
    return value!.toBigInt();
  }

  set lpToken(value: BigInt) {
    this.set("lpToken", Value.fromBigInt(value));
  }

  get ratePerSec(): BigInt {
    let value = this.get("ratePerSec");
    return value!.toBigInt();
  }

  set ratePerSec(value: BigInt) {
    this.set("ratePerSec", Value.fromBigInt(value));
  }
}

export class LendData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("address", Value.fromString(""));
    this.set("from", Value.fromBytes(Bytes.empty()));
    this.set("to", Value.fromBytes(Bytes.empty()));
    this.set("value", Value.fromBigInt(BigInt.zero()));
    this.set("baseAmount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LendData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save LendData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("LendData", id.toString(), this);
    }
  }

  static load(id: string): LendData | null {
    return changetype<LendData | null>(store.get("LendData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): string {
    let value = this.get("address");
    return value!.toString();
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get block(): BigInt | null {
    let value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set block(value: BigInt | null) {
    if (!value) {
      this.unset("block");
    } else {
      this.set("block", Value.fromBigInt(<BigInt>value));
    }
  }

  get transactionHash(): Bytes | null {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes | null) {
    if (!value) {
      this.unset("transactionHash");
    } else {
      this.set("transactionHash", Value.fromBytes(<Bytes>value));
    }
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value!.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get baseAmount(): BigInt {
    let value = this.get("baseAmount");
    return value!.toBigInt();
  }

  set baseAmount(value: BigInt) {
    this.set("baseAmount", Value.fromBigInt(value));
  }
}

export class KillData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save KillData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save KillData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("KillData", id.toString(), this);
    }
  }

  static load(id: string): KillData | null {
    return changetype<KillData | null>(store.get("KillData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get block(): BigInt | null {
    let value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set block(value: BigInt | null) {
    if (!value) {
      this.unset("block");
    } else {
      this.set("block", Value.fromBigInt(<BigInt>value));
    }
  }

  get transactionHash(): Bytes | null {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes | null) {
    if (!value) {
      this.unset("transactionHash");
    } else {
      this.set("transactionHash", Value.fromBytes(<Bytes>value));
    }
  }

  get Killer(): Bytes | null {
    let value = this.get("Killer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set Killer(value: Bytes | null) {
    if (!value) {
      this.unset("Killer");
    } else {
      this.set("Killer", Value.fromBytes(<Bytes>value));
    }
  }

  get owner(): Bytes | null {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes | null) {
    if (!value) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromBytes(<Bytes>value));
    }
  }

  get posVal(): BigInt | null {
    let value = this.get("posVal");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set posVal(value: BigInt | null) {
    if (!value) {
      this.unset("posVal");
    } else {
      this.set("posVal", Value.fromBigInt(<BigInt>value));
    }
  }

  get debt(): BigInt | null {
    let value = this.get("debt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set debt(value: BigInt | null) {
    if (!value) {
      this.unset("debt");
    } else {
      this.set("debt", Value.fromBigInt(<BigInt>value));
    }
  }

  get prize(): BigInt | null {
    let value = this.get("prize");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set prize(value: BigInt | null) {
    if (!value) {
      this.unset("prize");
    } else {
      this.set("prize", Value.fromBigInt(<BigInt>value));
    }
  }

  get left(): BigInt | null {
    let value = this.get("left");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set left(value: BigInt | null) {
    if (!value) {
      this.unset("left");
    } else {
      this.set("left", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class PriceUpdateData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("token0", Value.fromBytes(Bytes.empty()));
    this.set("token1", Value.fromBytes(Bytes.empty()));
    this.set("timesTamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PriceUpdateData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PriceUpdateData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PriceUpdateData", id.toString(), this);
    }
  }

  static load(id: string): PriceUpdateData | null {
    return changetype<PriceUpdateData | null>(store.get("PriceUpdateData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token0(): Bytes {
    let value = this.get("token0");
    return value!.toBytes();
  }

  set token0(value: Bytes) {
    this.set("token0", Value.fromBytes(value));
  }

  get token1(): Bytes {
    let value = this.get("token1");
    return value!.toBytes();
  }

  set token1(value: Bytes) {
    this.set("token1", Value.fromBytes(value));
  }

  get price(): BigInt | null {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set price(value: BigInt | null) {
    if (!value) {
      this.unset("price");
    } else {
      this.set("price", Value.fromBigInt(<BigInt>value));
    }
  }

  get timesTamp(): BigInt {
    let value = this.get("timesTamp");
    return value!.toBigInt();
  }

  set timesTamp(value: BigInt) {
    this.set("timesTamp", Value.fromBigInt(value));
  }
}

export class PositionData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("worker", Value.fromString(""));
    this.set("owner", Value.fromString(""));
    this.set("lpToken", Value.fromBigInt(BigInt.zero()));
    this.set("debtVal", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PositionData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PositionData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PositionData", id.toString(), this);
    }
  }

  static load(id: string): PositionData | null {
    return changetype<PositionData | null>(store.get("PositionData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get worker(): string {
    let value = this.get("worker");
    return value!.toString();
  }

  set worker(value: string) {
    this.set("worker", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get lpToken(): BigInt {
    let value = this.get("lpToken");
    return value!.toBigInt();
  }

  set lpToken(value: BigInt) {
    this.set("lpToken", Value.fromBigInt(value));
  }

  get debtVal(): BigInt {
    let value = this.get("debtVal");
    return value!.toBigInt();
  }

  set debtVal(value: BigInt) {
    this.set("debtVal", Value.fromBigInt(value));
  }
}

export class TotalPositionValue extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("totalPositionValue", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TotalPositionValue entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TotalPositionValue entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TotalPositionValue", id.toString(), this);
    }
  }

  static load(id: string): TotalPositionValue | null {
    return changetype<TotalPositionValue | null>(
      store.get("TotalPositionValue", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalPositionValue(): BigInt {
    let value = this.get("totalPositionValue");
    return value!.toBigInt();
  }

  set totalPositionValue(value: BigInt) {
    this.set("totalPositionValue", Value.fromBigInt(value));
  }
}
