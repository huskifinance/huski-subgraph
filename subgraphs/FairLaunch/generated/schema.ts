// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class StakeDepositData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("user", Value.fromBytes(Bytes.empty()));
    this.set("pid", Value.fromBigInt(BigInt.zero()));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StakeDepositData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save StakeDepositData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("StakeDepositData", id.toString(), this);
    }
  }

  static load(id: string): StakeDepositData | null {
    return changetype<StakeDepositData | null>(
      store.get("StakeDepositData", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get block(): BigInt | null {
    let value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set block(value: BigInt | null) {
    if (!value) {
      this.unset("block");
    } else {
      this.set("block", Value.fromBigInt(<BigInt>value));
    }
  }

  get transactionHash(): Bytes | null {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes | null) {
    if (!value) {
      this.unset("transactionHash");
    } else {
      this.set("transactionHash", Value.fromBytes(<Bytes>value));
    }
  }

  get user(): Bytes {
    let value = this.get("user");
    return value!.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get pid(): BigInt {
    let value = this.get("pid");
    return value!.toBigInt();
  }

  set pid(value: BigInt) {
    this.set("pid", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class StakeWithdrawData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("user", Value.fromBytes(Bytes.empty()));
    this.set("pid", Value.fromBigInt(BigInt.zero()));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StakeWithdrawData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save StakeWithdrawData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("StakeWithdrawData", id.toString(), this);
    }
  }

  static load(id: string): StakeWithdrawData | null {
    return changetype<StakeWithdrawData | null>(
      store.get("StakeWithdrawData", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get block(): BigInt | null {
    let value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set block(value: BigInt | null) {
    if (!value) {
      this.unset("block");
    } else {
      this.set("block", Value.fromBigInt(<BigInt>value));
    }
  }

  get transactionHash(): Bytes | null {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes | null) {
    if (!value) {
      this.unset("transactionHash");
    } else {
      this.set("transactionHash", Value.fromBytes(<Bytes>value));
    }
  }

  get user(): Bytes {
    let value = this.get("user");
    return value!.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get pid(): BigInt {
    let value = this.get("pid");
    return value!.toBigInt();
  }

  set pid(value: BigInt) {
    this.set("pid", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class StakeEmergencyWithdrawData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("user", Value.fromBytes(Bytes.empty()));
    this.set("pid", Value.fromBigInt(BigInt.zero()));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save StakeEmergencyWithdrawData entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save StakeEmergencyWithdrawData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("StakeEmergencyWithdrawData", id.toString(), this);
    }
  }

  static load(id: string): StakeEmergencyWithdrawData | null {
    return changetype<StakeEmergencyWithdrawData | null>(
      store.get("StakeEmergencyWithdrawData", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get block(): BigInt | null {
    let value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set block(value: BigInt | null) {
    if (!value) {
      this.unset("block");
    } else {
      this.set("block", Value.fromBigInt(<BigInt>value));
    }
  }

  get transactionHash(): Bytes | null {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes | null) {
    if (!value) {
      this.unset("transactionHash");
    } else {
      this.set("transactionHash", Value.fromBytes(<Bytes>value));
    }
  }

  get user(): Bytes {
    let value = this.get("user");
    return value!.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get pid(): BigInt {
    let value = this.get("pid");
    return value!.toBigInt();
  }

  set pid(value: BigInt) {
    this.set("pid", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class StakeDepositDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("pid", Value.fromBigInt(BigInt.zero()));
    this.set("date", Value.fromBigInt(BigInt.zero()));
    this.set("stakeToken", Value.fromBytes(Bytes.empty()));
    this.set("allocPoint", Value.fromBigInt(BigInt.zero()));
    this.set("lastRewardBlock", Value.fromBigInt(BigInt.zero()));
    this.set("accAlpacaPerShare", Value.fromBigInt(BigInt.zero()));
    this.set("accAlpacaPerShareTilBonusEnd", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StakeDepositDayData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save StakeDepositDayData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("StakeDepositDayData", id.toString(), this);
    }
  }

  static load(id: string): StakeDepositDayData | null {
    return changetype<StakeDepositDayData | null>(
      store.get("StakeDepositDayData", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): BigInt | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigInt(<BigInt>value));
    }
  }

  get pid(): BigInt {
    let value = this.get("pid");
    return value!.toBigInt();
  }

  set pid(value: BigInt) {
    this.set("pid", Value.fromBigInt(value));
  }

  get date(): BigInt {
    let value = this.get("date");
    return value!.toBigInt();
  }

  set date(value: BigInt) {
    this.set("date", Value.fromBigInt(value));
  }

  get stakeToken(): Bytes {
    let value = this.get("stakeToken");
    return value!.toBytes();
  }

  set stakeToken(value: Bytes) {
    this.set("stakeToken", Value.fromBytes(value));
  }

  get allocPoint(): BigInt {
    let value = this.get("allocPoint");
    return value!.toBigInt();
  }

  set allocPoint(value: BigInt) {
    this.set("allocPoint", Value.fromBigInt(value));
  }

  get lastRewardBlock(): BigInt {
    let value = this.get("lastRewardBlock");
    return value!.toBigInt();
  }

  set lastRewardBlock(value: BigInt) {
    this.set("lastRewardBlock", Value.fromBigInt(value));
  }

  get accAlpacaPerShare(): BigInt {
    let value = this.get("accAlpacaPerShare");
    return value!.toBigInt();
  }

  set accAlpacaPerShare(value: BigInt) {
    this.set("accAlpacaPerShare", Value.fromBigInt(value));
  }

  get accAlpacaPerShareTilBonusEnd(): BigInt {
    let value = this.get("accAlpacaPerShareTilBonusEnd");
    return value!.toBigInt();
  }

  set accAlpacaPerShareTilBonusEnd(value: BigInt) {
    this.set("accAlpacaPerShareTilBonusEnd", Value.fromBigInt(value));
  }
}

export class StakeWithdrawDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("pid", Value.fromBigInt(BigInt.zero()));
    this.set("date", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StakeWithdrawDayData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save StakeWithdrawDayData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("StakeWithdrawDayData", id.toString(), this);
    }
  }

  static load(id: string): StakeWithdrawDayData | null {
    return changetype<StakeWithdrawDayData | null>(
      store.get("StakeWithdrawDayData", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): BigInt | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigInt(<BigInt>value));
    }
  }

  get pid(): BigInt {
    let value = this.get("pid");
    return value!.toBigInt();
  }

  set pid(value: BigInt) {
    this.set("pid", Value.fromBigInt(value));
  }

  get date(): BigInt {
    let value = this.get("date");
    return value!.toBigInt();
  }

  set date(value: BigInt) {
    this.set("date", Value.fromBigInt(value));
  }
}

export class StakeEmergencyWithdrawDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("pid", Value.fromBigInt(BigInt.zero()));
    this.set("date", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save StakeEmergencyWithdrawDayData entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save StakeEmergencyWithdrawDayData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("StakeEmergencyWithdrawDayData", id.toString(), this);
    }
  }

  static load(id: string): StakeEmergencyWithdrawDayData | null {
    return changetype<StakeEmergencyWithdrawDayData | null>(
      store.get("StakeEmergencyWithdrawDayData", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): BigInt | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigInt(<BigInt>value));
    }
  }

  get pid(): BigInt {
    let value = this.get("pid");
    return value!.toBigInt();
  }

  set pid(value: BigInt) {
    this.set("pid", Value.fromBigInt(value));
  }

  get date(): BigInt {
    let value = this.get("date");
    return value!.toBigInt();
  }

  set date(value: BigInt) {
    this.set("date", Value.fromBigInt(value));
  }
}

export class PoolInfoDtat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("accAlpacaPerShareTilBonusEnd", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolInfoDtat entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PoolInfoDtat entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PoolInfoDtat", id.toString(), this);
    }
  }

  static load(id: string): PoolInfoDtat | null {
    return changetype<PoolInfoDtat | null>(store.get("PoolInfoDtat", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get stakeToken(): Bytes | null {
    let value = this.get("stakeToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set stakeToken(value: Bytes | null) {
    if (!value) {
      this.unset("stakeToken");
    } else {
      this.set("stakeToken", Value.fromBytes(<Bytes>value));
    }
  }

  get allocPoint(): BigInt | null {
    let value = this.get("allocPoint");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set allocPoint(value: BigInt | null) {
    if (!value) {
      this.unset("allocPoint");
    } else {
      this.set("allocPoint", Value.fromBigInt(<BigInt>value));
    }
  }

  get lastRewardBlock(): BigInt | null {
    let value = this.get("lastRewardBlock");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastRewardBlock(value: BigInt | null) {
    if (!value) {
      this.unset("lastRewardBlock");
    } else {
      this.set("lastRewardBlock", Value.fromBigInt(<BigInt>value));
    }
  }

  get accAlpacaPerShare(): BigInt | null {
    let value = this.get("accAlpacaPerShare");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set accAlpacaPerShare(value: BigInt | null) {
    if (!value) {
      this.unset("accAlpacaPerShare");
    } else {
      this.set("accAlpacaPerShare", Value.fromBigInt(<BigInt>value));
    }
  }

  get accAlpacaPerShareTilBonusEnd(): BigInt {
    let value = this.get("accAlpacaPerShareTilBonusEnd");
    return value!.toBigInt();
  }

  set accAlpacaPerShareTilBonusEnd(value: BigInt) {
    this.set("accAlpacaPerShareTilBonusEnd", Value.fromBigInt(value));
  }
}
