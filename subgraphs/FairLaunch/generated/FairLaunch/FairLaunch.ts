// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EmergencyWithdraw extends ethereum.Event {
  get params(): EmergencyWithdraw__Params {
    return new EmergencyWithdraw__Params(this);
  }
}

export class EmergencyWithdraw__Params {
  _event: EmergencyWithdraw;

  constructor(event: EmergencyWithdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FairLaunch__poolInfoResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class FairLaunch__userInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: Address;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    return map;
  }
}

export class FairLaunch extends ethereum.SmartContract {
  static bind(address: Address): FairLaunch {
    return new FairLaunch("FairLaunch", address);
  }

  alpaca(): Address {
    let result = super.call("alpaca", "alpaca():(address)", []);

    return result[0].toAddress();
  }

  try_alpaca(): ethereum.CallResult<Address> {
    let result = super.tryCall("alpaca", "alpaca():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  alpacaPerBlock(): BigInt {
    let result = super.call("alpacaPerBlock", "alpacaPerBlock():(uint256)", []);

    return result[0].toBigInt();
  }

  try_alpacaPerBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "alpacaPerBlock",
      "alpacaPerBlock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  badgePoints(): Address {
    let result = super.call("badgePoints", "badgePoints():(address)", []);

    return result[0].toAddress();
  }

  try_badgePoints(): ethereum.CallResult<Address> {
    let result = super.tryCall("badgePoints", "badgePoints():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  badgeRelayer(): Address {
    let result = super.call("badgeRelayer", "badgeRelayer():(address)", []);

    return result[0].toAddress();
  }

  try_badgeRelayer(): ethereum.CallResult<Address> {
    let result = super.tryCall("badgeRelayer", "badgeRelayer():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  bonusEndBlock(): BigInt {
    let result = super.call("bonusEndBlock", "bonusEndBlock():(uint256)", []);

    return result[0].toBigInt();
  }

  try_bonusEndBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "bonusEndBlock",
      "bonusEndBlock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bonusLockUpBps(): BigInt {
    let result = super.call("bonusLockUpBps", "bonusLockUpBps():(uint256)", []);

    return result[0].toBigInt();
  }

  try_bonusLockUpBps(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "bonusLockUpBps",
      "bonusLockUpBps():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bonusMultiplier(): BigInt {
    let result = super.call(
      "bonusMultiplier",
      "bonusMultiplier():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_bonusMultiplier(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "bonusMultiplier",
      "bonusMultiplier():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  complexOracle(): Address {
    let result = super.call("complexOracle", "complexOracle():(address)", []);

    return result[0].toAddress();
  }

  try_complexOracle(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "complexOracle",
      "complexOracle():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  devaddr(): Address {
    let result = super.call("devaddr", "devaddr():(address)", []);

    return result[0].toAddress();
  }

  try_devaddr(): ethereum.CallResult<Address> {
    let result = super.tryCall("devaddr", "devaddr():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getMultiplier(_lastRewardBlock: BigInt, _currentBlock: BigInt): BigInt {
    let result = super.call(
      "getMultiplier",
      "getMultiplier(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_lastRewardBlock),
        ethereum.Value.fromUnsignedBigInt(_currentBlock)
      ]
    );

    return result[0].toBigInt();
  }

  try_getMultiplier(
    _lastRewardBlock: BigInt,
    _currentBlock: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMultiplier",
      "getMultiplier(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_lastRewardBlock),
        ethereum.Value.fromUnsignedBigInt(_currentBlock)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isDuplicatedPool(_stakeToken: Address): boolean {
    let result = super.call(
      "isDuplicatedPool",
      "isDuplicatedPool(address):(bool)",
      [ethereum.Value.fromAddress(_stakeToken)]
    );

    return result[0].toBoolean();
  }

  try_isDuplicatedPool(_stakeToken: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isDuplicatedPool",
      "isDuplicatedPool(address):(bool)",
      [ethereum.Value.fromAddress(_stakeToken)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingAlpaca(_pid: BigInt, _user: Address): BigInt {
    let result = super.call(
      "pendingAlpaca",
      "pendingAlpaca(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_pid),
        ethereum.Value.fromAddress(_user)
      ]
    );

    return result[0].toBigInt();
  }

  try_pendingAlpaca(_pid: BigInt, _user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pendingAlpaca",
      "pendingAlpaca(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_pid),
        ethereum.Value.fromAddress(_user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  poolInfo(param0: BigInt): FairLaunch__poolInfoResult {
    let result = super.call(
      "poolInfo",
      "poolInfo(uint256):(address,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new FairLaunch__poolInfoResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_poolInfo(
    param0: BigInt
  ): ethereum.CallResult<FairLaunch__poolInfoResult> {
    let result = super.tryCall(
      "poolInfo",
      "poolInfo(uint256):(address,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FairLaunch__poolInfoResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  poolLength(): BigInt {
    let result = super.call("poolLength", "poolLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_poolLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("poolLength", "poolLength():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  startBlock(): BigInt {
    let result = super.call("startBlock", "startBlock():(uint256)", []);

    return result[0].toBigInt();
  }

  try_startBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("startBlock", "startBlock():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalAllocPoint(): BigInt {
    let result = super.call(
      "totalAllocPoint",
      "totalAllocPoint():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalAllocPoint(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalAllocPoint",
      "totalAllocPoint():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userInfo(param0: BigInt, param1: Address): FairLaunch__userInfoResult {
    let result = super.call(
      "userInfo",
      "userInfo(uint256,address):(uint256,uint256,uint256,address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return new FairLaunch__userInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toAddress()
    );
  }

  try_userInfo(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<FairLaunch__userInfoResult> {
    let result = super.tryCall(
      "userInfo",
      "userInfo(uint256,address):(uint256,uint256,uint256,address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FairLaunch__userInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toAddress()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _alpaca(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _devaddr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _alpacaPerBlock(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _startBlock(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _bonusLockupBps(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _bonusEndBlock(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddPoolCall extends ethereum.Call {
  get inputs(): AddPoolCall__Inputs {
    return new AddPoolCall__Inputs(this);
  }

  get outputs(): AddPoolCall__Outputs {
    return new AddPoolCall__Outputs(this);
  }
}

export class AddPoolCall__Inputs {
  _call: AddPoolCall;

  constructor(call: AddPoolCall) {
    this._call = call;
  }

  get _allocPoint(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _stakeToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _withUpdate(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class AddPoolCall__Outputs {
  _call: AddPoolCall;

  constructor(call: AddPoolCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _for(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _pid(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawCall__Inputs {
    return new EmergencyWithdrawCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawCall__Outputs {
    return new EmergencyWithdrawCall__Outputs(this);
  }
}

export class EmergencyWithdrawCall__Inputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class EmergencyWithdrawCall__Outputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }
}

export class HarvestCall extends ethereum.Call {
  get inputs(): HarvestCall__Inputs {
    return new HarvestCall__Inputs(this);
  }

  get outputs(): HarvestCall__Outputs {
    return new HarvestCall__Outputs(this);
  }
}

export class HarvestCall__Inputs {
  _call: HarvestCall;

  constructor(call: HarvestCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class HarvestCall__Outputs {
  _call: HarvestCall;

  constructor(call: HarvestCall) {
    this._call = call;
  }
}

export class LockToOwnerCall extends ethereum.Call {
  get inputs(): LockToOwnerCall__Inputs {
    return new LockToOwnerCall__Inputs(this);
  }

  get outputs(): LockToOwnerCall__Outputs {
    return new LockToOwnerCall__Outputs(this);
  }
}

export class LockToOwnerCall__Inputs {
  _call: LockToOwnerCall;

  constructor(call: LockToOwnerCall) {
    this._call = call;
  }

  get _account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class LockToOwnerCall__Outputs {
  _call: LockToOwnerCall;

  constructor(call: LockToOwnerCall) {
    this._call = call;
  }
}

export class ManualMintCall extends ethereum.Call {
  get inputs(): ManualMintCall__Inputs {
    return new ManualMintCall__Inputs(this);
  }

  get outputs(): ManualMintCall__Outputs {
    return new ManualMintCall__Outputs(this);
  }
}

export class ManualMintCall__Inputs {
  _call: ManualMintCall;

  constructor(call: ManualMintCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ManualMintCall__Outputs {
  _call: ManualMintCall;

  constructor(call: ManualMintCall) {
    this._call = call;
  }
}

export class MassUpdatePoolsCall extends ethereum.Call {
  get inputs(): MassUpdatePoolsCall__Inputs {
    return new MassUpdatePoolsCall__Inputs(this);
  }

  get outputs(): MassUpdatePoolsCall__Outputs {
    return new MassUpdatePoolsCall__Outputs(this);
  }
}

export class MassUpdatePoolsCall__Inputs {
  _call: MassUpdatePoolsCall;

  constructor(call: MassUpdatePoolsCall) {
    this._call = call;
  }
}

export class MassUpdatePoolsCall__Outputs {
  _call: MassUpdatePoolsCall;

  constructor(call: MassUpdatePoolsCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetAlpacaPerBlockCall extends ethereum.Call {
  get inputs(): SetAlpacaPerBlockCall__Inputs {
    return new SetAlpacaPerBlockCall__Inputs(this);
  }

  get outputs(): SetAlpacaPerBlockCall__Outputs {
    return new SetAlpacaPerBlockCall__Outputs(this);
  }
}

export class SetAlpacaPerBlockCall__Inputs {
  _call: SetAlpacaPerBlockCall;

  constructor(call: SetAlpacaPerBlockCall) {
    this._call = call;
  }

  get _alpacaPerBlock(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetAlpacaPerBlockCall__Outputs {
  _call: SetAlpacaPerBlockCall;

  constructor(call: SetAlpacaPerBlockCall) {
    this._call = call;
  }
}

export class SetBadgePointsCall extends ethereum.Call {
  get inputs(): SetBadgePointsCall__Inputs {
    return new SetBadgePointsCall__Inputs(this);
  }

  get outputs(): SetBadgePointsCall__Outputs {
    return new SetBadgePointsCall__Outputs(this);
  }
}

export class SetBadgePointsCall__Inputs {
  _call: SetBadgePointsCall;

  constructor(call: SetBadgePointsCall) {
    this._call = call;
  }

  get _badgePoints(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _complexOracle(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetBadgePointsCall__Outputs {
  _call: SetBadgePointsCall;

  constructor(call: SetBadgePointsCall) {
    this._call = call;
  }
}

export class SetBadgeRelayerCall extends ethereum.Call {
  get inputs(): SetBadgeRelayerCall__Inputs {
    return new SetBadgeRelayerCall__Inputs(this);
  }

  get outputs(): SetBadgeRelayerCall__Outputs {
    return new SetBadgeRelayerCall__Outputs(this);
  }
}

export class SetBadgeRelayerCall__Inputs {
  _call: SetBadgeRelayerCall;

  constructor(call: SetBadgeRelayerCall) {
    this._call = call;
  }

  get _relayer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetBadgeRelayerCall__Outputs {
  _call: SetBadgeRelayerCall;

  constructor(call: SetBadgeRelayerCall) {
    this._call = call;
  }
}

export class SetBonusCall extends ethereum.Call {
  get inputs(): SetBonusCall__Inputs {
    return new SetBonusCall__Inputs(this);
  }

  get outputs(): SetBonusCall__Outputs {
    return new SetBonusCall__Outputs(this);
  }
}

export class SetBonusCall__Inputs {
  _call: SetBonusCall;

  constructor(call: SetBonusCall) {
    this._call = call;
  }

  get _bonusMultiplier(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _bonusEndBlock(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _bonusLockUpBps(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetBonusCall__Outputs {
  _call: SetBonusCall;

  constructor(call: SetBonusCall) {
    this._call = call;
  }
}

export class SetDevCall extends ethereum.Call {
  get inputs(): SetDevCall__Inputs {
    return new SetDevCall__Inputs(this);
  }

  get outputs(): SetDevCall__Outputs {
    return new SetDevCall__Outputs(this);
  }
}

export class SetDevCall__Inputs {
  _call: SetDevCall;

  constructor(call: SetDevCall) {
    this._call = call;
  }

  get _devaddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetDevCall__Outputs {
  _call: SetDevCall;

  constructor(call: SetDevCall) {
    this._call = call;
  }
}

export class SetPoolCall extends ethereum.Call {
  get inputs(): SetPoolCall__Inputs {
    return new SetPoolCall__Inputs(this);
  }

  get outputs(): SetPoolCall__Outputs {
    return new SetPoolCall__Outputs(this);
  }
}

export class SetPoolCall__Inputs {
  _call: SetPoolCall;

  constructor(call: SetPoolCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _allocPoint(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get value2(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SetPoolCall__Outputs {
  _call: SetPoolCall;

  constructor(call: SetPoolCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnlockFromOwnerCall extends ethereum.Call {
  get inputs(): UnlockFromOwnerCall__Inputs {
    return new UnlockFromOwnerCall__Inputs(this);
  }

  get outputs(): UnlockFromOwnerCall__Outputs {
    return new UnlockFromOwnerCall__Outputs(this);
  }
}

export class UnlockFromOwnerCall__Inputs {
  _call: UnlockFromOwnerCall;

  constructor(call: UnlockFromOwnerCall) {
    this._call = call;
  }

  get _account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UnlockFromOwnerCall__Outputs {
  _call: UnlockFromOwnerCall;

  constructor(call: UnlockFromOwnerCall) {
    this._call = call;
  }
}

export class UpdatePoolCall extends ethereum.Call {
  get inputs(): UpdatePoolCall__Inputs {
    return new UpdatePoolCall__Inputs(this);
  }

  get outputs(): UpdatePoolCall__Outputs {
    return new UpdatePoolCall__Outputs(this);
  }
}

export class UpdatePoolCall__Inputs {
  _call: UpdatePoolCall;

  constructor(call: UpdatePoolCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdatePoolCall__Outputs {
  _call: UpdatePoolCall;

  constructor(call: UpdatePoolCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _for(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _pid(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawAllCall extends ethereum.Call {
  get inputs(): WithdrawAllCall__Inputs {
    return new WithdrawAllCall__Inputs(this);
  }

  get outputs(): WithdrawAllCall__Outputs {
    return new WithdrawAllCall__Outputs(this);
  }
}

export class WithdrawAllCall__Inputs {
  _call: WithdrawAllCall;

  constructor(call: WithdrawAllCall) {
    this._call = call;
  }

  get _for(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _pid(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawAllCall__Outputs {
  _call: WithdrawAllCall;

  constructor(call: WithdrawAllCall) {
    this._call = call;
  }
}
